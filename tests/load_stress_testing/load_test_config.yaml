# TrustStram v4.4 Load Testing Configuration
# This file defines comprehensive load testing scenarios and parameters

# Test Configuration
name: "TrustStram v4.4 Enterprise Load Testing Suite"
description: "Comprehensive load and stress testing for enterprise deployment validation"
version: "4.4.0"

# Target System Configuration
target_system:
  base_url: "http://localhost:3000"
  auth_token: null  # Set via environment variable or command line
  environment: "load_test"
  region: "us-west-2"

# Test Execution Parameters
execution:
  total_duration_seconds: 3600  # 1 hour comprehensive test
  ramp_up_seconds: 600  # 10 minutes ramp-up
  ramp_down_seconds: 300  # 5 minutes ramp-down
  max_concurrent_users: 1000
  think_time_seconds: 1.0
  timeout_seconds: 30

# Load Testing Scenarios
scenarios:
  
  # API Gateway Load Testing
  api_endpoints:
    health_check:
      endpoint: "/health"
      method: "GET"
      concurrent_users: 100
      duration_seconds: 1800
      target_rps: 500
      weight: 20  # Percentage of total load
      
    status_monitoring:
      endpoint: "/status"
      method: "GET"
      concurrent_users: 150
      duration_seconds: 2400
      target_rps: 300
      weight: 15
      
    features_discovery:
      endpoint: "/features"
      method: "GET"
      concurrent_users: 80
      duration_seconds: 1200
      target_rps: 200
      weight: 10
      
    metrics_collection:
      endpoint: "/metrics"
      method: "GET"
      concurrent_users: 120
      duration_seconds: 3000
      target_rps: 150
      weight: 15
      
    federated_learning_endpoints:
      train_endpoint:
        endpoint: "/federated-learning/train"
        method: "POST"
        concurrent_users: 50
        duration_seconds: 2400
        target_rps: 25
        weight: 10
        payload:
          model_config:
            architecture: "neural_network"
            layers: [64, 32, 16]
            activation: "relu"
            optimizer: "adam"
          data_config:
            dataset_type: "horizontal"
            feature_schema: {"features": 100}
            validation_split: 0.2
          num_clients: 10
          num_rounds: 20
          privacy_budget: 2.0
          scenario_type: "horizontal"
      
      status_endpoint:
        endpoint: "/federated-learning/status/{job_id}"
        method: "GET"
        concurrent_users: 30
        duration_seconds: 1800
        target_rps: 100
        weight: 5

  # AI Agents Stress Testing
  ai_agents:
    efficiency_agent:
      agent_id: "ai-leader-efficiency-agent"
      concurrent_requests: 40
      duration_seconds: 2400
      query_types:
        - type: "performance_optimization"
          weight: 40
          context:
            system_load: "high"
            response_time_threshold: 100
        - type: "resource_analysis"
          weight: 30
          context:
            cpu_threshold: 80
            memory_threshold: 85
        - type: "bottleneck_identification"
          weight: 30
          context:
            component: "api_gateway"
            metric: "response_time"
    
    quality_agent:
      agent_id: "ai-leader-quality-agent"
      concurrent_requests: 35
      duration_seconds: 2400
      query_types:
        - type: "quality_assessment"
          weight: 50
          context:
            quality_metrics: ["accuracy", "relevance", "completeness"]
        - type: "quality_monitoring"
          weight: 30
          context:
            threshold: 0.85
            time_window: "1h"
        - type: "quality_improvement"
          weight: 20
          context:
            target_metric: "user_satisfaction"
            improvement_target: 10
    
    transparency_agent:
      agent_id: "ai-leader-transparency-agent"
      concurrent_requests: 30
      duration_seconds: 1800
      query_types:
        - type: "transparency_analysis"
          weight: 60
          context:
            decision_ids: ["dec_1", "dec_2", "dec_3"]
        - type: "audit_trail_generation"
          weight: 40
          context:
            time_range: "24h"
            component: "federated_learning"
    
    accountability_agent:
      agent_id: "ai-leader-accountability-agent"
      concurrent_requests: 25
      duration_seconds: 1800
      query_types:
        - type: "accountability_review"
          weight: 50
          context:
            review_period: "24h"
            compliance_framework: "enterprise"
        - type: "bias_detection"
          weight: 30
          context:
            model_id: "production_model_v1"
            protected_attributes: ["age", "gender"]
        - type: "ethics_compliance"
          weight: 20
          context:
            ethics_framework: "ieee_standards"
    
    innovation_agent:
      agent_id: "ai-leader-innovation-agent"
      concurrent_requests: 20
      duration_seconds: 1200
      query_types:
        - type: "innovation_assessment"
          weight: 60
          context:
            focus_areas: ["efficiency", "automation", "user_experience"]
        - type: "technology_scouting"
          weight: 40
          context:
            domain: "federated_learning"
            horizon: "6_months"

  # Federated Learning Stress Testing
  federated_learning:
    cross_device_simulation:
      scenario_type: "cross_device"
      num_clients: 5000
      num_rounds: 15
      client_types:
        mobile: 60
        iot: 25
        edge: 15
      network_conditions:
        slow: 30
        medium: 50
        fast: 20
      dropout_rate: 0.15
      privacy_budget: 4.0
      
    cross_silo_simulation:
      scenario_type: "cross_silo"
      num_silos: 100
      num_rounds: 30
      silo_sizes:
        small: 30  # < 10k records
        medium: 50  # 10k-100k records
        large: 20  # > 100k records
      dropout_rate: 0.05
      privacy_budget: 8.0
      
    horizontal_federation:
      scenario_type: "horizontal"
      num_participants: 1000
      num_rounds: 20
      data_distribution: "iid"  # or "non_iid"
      privacy_mechanisms: ["differential_privacy", "secure_aggregation"]
      
    vertical_federation:
      scenario_type: "vertical"
      num_participants: 50
      num_rounds: 25
      feature_distribution: "complementary"
      privacy_mechanisms: ["homomorphic_encryption", "secure_multiparty_computation"]
      
    massive_scale_stress_test:
      scenario_type: "massive_scale"
      num_clients: 25000
      single_round_test: true
      client_selection_ratio: 0.1
      bandwidth_limit_mbps: 100
      resource_constraints:
        cpu_limit: 4
        memory_limit_gb: 8

  # Database Load Testing
  database:
    connection_string: "postgresql://trustram_user:password@localhost:5432/trustram_load_test"
    pool_configuration:
      min_pool_size: 10
      max_pool_size: 200
      connection_timeout: 30
      idle_timeout: 300
    
    load_patterns:
      read_heavy:
        concurrent_connections: 150
        read_write_ratio: 80:20
        duration_seconds: 1800
        operations:
          - type: "SELECT"
            complexity: "simple"
            weight: 50
          - type: "SELECT"
            complexity: "join"
            weight: 30
          - type: "INSERT"
            weight: 15
          - type: "UPDATE"
            weight: 5
      
      write_heavy:
        concurrent_connections: 100
        read_write_ratio: 30:70
        duration_seconds: 1200
        operations:
          - type: "INSERT"
            weight: 40
          - type: "UPDATE"
            weight: 30
          - type: "SELECT"
            complexity: "simple"
            weight: 20
          - type: "DELETE"
            weight: 10
      
      mixed_workload:
        concurrent_connections: 200
        read_write_ratio: 60:40
        duration_seconds: 2400
        operations:
          - type: "SELECT"
            complexity: "simple"
            weight: 35
          - type: "SELECT"
            complexity: "join"
            weight: 25
          - type: "INSERT"
            weight: 20
          - type: "UPDATE"
            weight: 15
          - type: "DELETE"
            weight: 5

  # Auto-scaling and Failover Testing
  auto_scaling:
    load_based_scaling:
      duration_minutes: 30
      phases:
        - name: "baseline"
          users: 20
          duration_minutes: 5
          target_rps: 100
        - name: "ramp_up"
          users: 200
          duration_minutes: 8
          target_rps: 1000
        - name: "peak_load"
          users: 500
          duration_minutes: 10
          target_rps: 2500
        - name: "spike_test"
          users: 800
          duration_minutes: 2
          target_rps: 4000
        - name: "ramp_down"
          users: 100
          duration_minutes: 5
          target_rps: 500
      
      scaling_triggers:
        cpu_threshold: 70
        memory_threshold: 75
        response_time_threshold: 2.0
        queue_length_threshold: 50
      
      scaling_policies:
        scale_up_cooldown: 300  # 5 minutes
        scale_down_cooldown: 600  # 10 minutes
        min_instances: 2
        max_instances: 20
        scale_up_increment: 2
        scale_down_increment: 1
    
    resource_based_scaling:
      cpu_stress_test:
        target_cpu_utilization: [50, 70, 85, 95]
        duration_per_level: 300
      memory_stress_test:
        target_memory_utilization: [60, 75, 85, 90]
        duration_per_level: 300
  
  failover_testing:
    database_failover:
      failure_types: ["primary_failure", "connection_timeout", "slow_queries"]
      detection_timeout: 30
      failover_timeout: 120
      recovery_verification: true
    
    api_gateway_failover:
      failure_types: ["instance_failure", "network_partition", "resource_exhaustion"]
      detection_timeout: 15
      failover_timeout: 60
      load_balancer_validation: true
    
    ai_agent_failover:
      failure_types: ["agent_crash", "model_corruption", "resource_starvation"]
      detection_timeout: 20
      failover_timeout: 90
      workload_redistribution: true

# Performance Thresholds and SLA Targets
thresholds:
  response_time:
    api_gateway:
      p50: 0.200  # 200ms
      p95: 1.000  # 1 second
      p99: 2.000  # 2 seconds
      max: 5.000  # 5 seconds
    
    ai_agents:
      p50: 0.500  # 500ms
      p95: 2.000  # 2 seconds
      p99: 5.000  # 5 seconds
      max: 10.000  # 10 seconds
    
    database:
      p50: 0.050  # 50ms
      p95: 0.200  # 200ms
      p99: 0.500  # 500ms
      max: 1.000  # 1 second
  
  error_rates:
    api_gateway_max: 1.0  # 1%
    ai_agents_max: 2.0    # 2%
    database_max: 0.5     # 0.5%
    federated_learning_max: 5.0  # 5%
  
  throughput:
    api_gateway_min_rps: 1000
    ai_agents_min_rps: 100
    database_min_ops: 2000
  
  resource_utilization:
    cpu_max: 80.0         # 80%
    memory_max: 85.0      # 85%
    disk_io_max: 70.0     # 70%
    network_max: 60.0     # 60%
  
  availability:
    target_uptime: 99.9   # 99.9%
    max_downtime_minutes: 8.76  # Per month
  
  scalability:
    auto_scaling_latency_max: 180  # 3 minutes
    failover_time_max: 120         # 2 minutes
    recovery_time_max: 300         # 5 minutes

# Monitoring and Reporting
monitoring:
  system_metrics:
    collection_interval: 5  # seconds
    metrics:
      - "cpu_usage"
      - "memory_usage"
      - "disk_io"
      - "network_io"
      - "open_connections"
      - "response_times"
      - "error_rates"
      - "throughput"
  
  application_metrics:
    - "active_users"
    - "requests_per_second"
    - "cache_hit_ratio"
    - "database_connections"
    - "queue_lengths"
    - "agent_response_times"
    - "federated_learning_metrics"
  
  alerting:
    critical_thresholds:
      response_time_p99: 5.0
      error_rate: 5.0
      cpu_usage: 90.0
      memory_usage: 95.0
    
    warning_thresholds:
      response_time_p95: 2.0
      error_rate: 2.0
      cpu_usage: 80.0
      memory_usage: 85.0

# Reporting Configuration
reporting:
  output_formats: ["json", "markdown", "html", "csv"]
  include_charts: true
  include_recommendations: true
  
  sections:
    - "executive_summary"
    - "test_configuration"
    - "performance_results"
    - "scalability_analysis"
    - "failover_validation"
    - "capacity_recommendations"
    - "sla_compliance"
    - "bottleneck_analysis"
    - "cost_optimization"
    - "next_steps"
  
  capacity_recommendations:
    include_cost_analysis: true
    forecast_periods: ["1_month", "3_months", "6_months", "1_year"]
    growth_assumptions:
      user_growth_rate: 20  # % per quarter
      data_growth_rate: 30  # % per quarter
      request_growth_rate: 25  # % per quarter

# Environment-specific Overrides
environments:
  development:
    execution:
      total_duration_seconds: 300  # 5 minutes
      max_concurrent_users: 50
    scenarios:
      federated_learning:
        cross_device_simulation:
          num_clients: 100
          num_rounds: 3
  
  staging:
    execution:
      total_duration_seconds: 1800  # 30 minutes
      max_concurrent_users: 300
    scenarios:
      federated_learning:
        cross_device_simulation:
          num_clients: 1000
          num_rounds: 8
  
  production:
    execution:
      total_duration_seconds: 7200  # 2 hours
      max_concurrent_users: 2000
    scenarios:
      federated_learning:
        massive_scale_stress_test:
          num_clients: 50000