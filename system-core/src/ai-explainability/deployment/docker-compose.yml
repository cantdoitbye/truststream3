# TrustStram v4.4 AI Explainability - Docker Compose Configuration
# Provides complete microservices architecture for explainability features

version: '3.8'

services:
  # Explanation Gateway Service
  explanation-gateway:
    build:
      context: ./services/explanation-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - POSTGRES_URL=postgresql://user:password@postgres:5432/truststream
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - postgres
      - mlflow
    volumes:
      - ./logs:/app/logs
    networks:
      - explainability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Explainer Service
  explainer-service:
    build:
      context: ./services/explainer-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_REGISTRY_URL=http://mlflow:5000
      - SHAP_WORKERS=4
      - LIME_WORKERS=2
      - INTERPRETMAL_WORKERS=2
    depends_on:
      - redis
      - mlflow
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - explainability-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Bias Auditor Service
  bias-auditor-service:
    build:
      context: ./services/bias-auditor-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - POSTGRES_URL=postgresql://user:password@postgres:5432/truststream
      - AEQUITAS_CONFIG_PATH=/app/config/aequitas.yaml
      - FAIRLEARN_METRICS_ENABLED=true
    depends_on:
      - postgres
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - explainability-network
    restart: unless-stopped

  # Audit Trail Service
  audit-trail-service:
    build:
      context: ./services/audit-trail-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - POSTGRES_URL=postgresql://user:password@postgres:5432/truststream
      - DECISION_LOG_RETENTION_DAYS=2555  # 7 years for GDPR compliance
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - postgres
      - mlflow
    volumes:
      - ./audit-logs:/app/audit-logs
      - ./logs:/app/logs
    networks:
      - explainability-network
    restart: unless-stopped

  # Visualization Service
  visualization-service:
    build:
      context: ./services/visualization-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - REDIS_URL=redis://redis:6379
      - EXPLANATION_GATEWAY_URL=http://explanation-gateway:8080
    depends_on:
      - redis
      - explanation-gateway
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    networks:
      - explainability-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - explainability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=truststream
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - explainability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d truststream"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow Model Registry
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://user:password@postgres:5432/truststream
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - postgres
      - minio
    volumes:
      - ./mlflow:/app
    working_dir: /app
    command: >
      bash -c "pip install mlflow psycopg2-binary boto3 &&
               mlflow server 
               --backend-store-uri postgresql://user:password@postgres:5432/truststream 
               --default-artifact-root s3://mlflow-artifacts 
               --host 0.0.0.0 
               --port 5000"
    networks:
      - explainability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - explainability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - explainability-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - explainability-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - explanation-gateway
      - visualization-service
    networks:
      - explainability-network
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  explainability-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
