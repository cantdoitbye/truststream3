# AWS Infrastructure Provider Configuration for Cluster API
# This configures the AWS infrastructure provider for CAPI
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSClusterTemplate
metadata:
  name: aws-cluster-template
  namespace: default
spec:
  template:
    spec:
      # AWS Region Configuration
      region: us-west-2
      
      # VPC Configuration
      network:
        vpc:
          cidrBlock: "10.0.0.0/16"
          enableDnsHostnames: true
          enableDnsSupport: true
          tags:
            Name: "trustram-v4.4-vpc"
            Environment: "production"
            Project: "multi-cloud-orchestration"
        
        # Subnet Configuration
        subnets:
        - cidrBlock: "10.0.1.0/24"
          availabilityZone: "us-west-2a"
          isPublic: true
          tags:
            Name: "trustram-public-subnet-1"
            Type: "public"
        - cidrBlock: "10.0.2.0/24"
          availabilityZone: "us-west-2b"
          isPublic: true
          tags:
            Name: "trustram-public-subnet-2"
            Type: "public"
        - cidrBlock: "10.0.11.0/24"
          availabilityZone: "us-west-2a"
          isPublic: false
          tags:
            Name: "trustram-private-subnet-1"
            Type: "private"
        - cidrBlock: "10.0.12.0/24"
          availabilityZone: "us-west-2b"
          isPublic: false
          tags:
            Name: "trustram-private-subnet-2"
            Type: "private"
      
      # Control Plane Configuration
      controlPlaneEndpoint:
        host: ""
        port: 6443
      
      # IAM Configuration
      identityRef:
        kind: AWSClusterRoleIdentity
        name: default
      
      # Additional Tags
      additionalTags:
        "sigs.k8s.io/cluster-api-provider-aws/cluster/trustram-aws": "owned"
        "sigs.k8s.io/cluster-api-provider-aws/role": "common"
        "kubernetes.io/cluster/trustram-aws": "owned"
        
---
# AWS Machine Template for Control Plane
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSMachineTemplate
metadata:
  name: aws-control-plane-machine-template
  namespace: default
spec:
  template:
    spec:
      # Instance Configuration
      instanceType: m5.xlarge
      ami:
        id: "ami-0abcdef1234567890"  # Ubuntu 22.04 LTS (update with latest AMI)
      
      # Security Groups
      securityGroupSelector:
        matchLabels:
          "sigs.k8s.io/cluster-api-provider-aws/cluster/trustram-aws": "owned"
          "sigs.k8s.io/cluster-api-provider-aws/role": "controlplane"
      
      # SSH Configuration
      sshKeyName: "trustram-keypair"
      
      # Root Volume
      rootVolume:
        size: 50
        type: gp3
        iops: 3000
        throughput: 125
        encrypted: true
      
      # Additional Security Groups
      additionalSecurityGroups:
      - id: "sg-controlplane"
      
      # Instance Metadata Options
      instanceMetadataOptions:
        httpEndpoint: "enabled"
        httpPutResponseHopLimit: 2
        httpTokens: "required"
      
      # User Data for Kubernetes Bootstrap
      userData: |
        #!/bin/bash
        set -e
        
        # Install kubeadm, kubelet, kubectl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
        apt-get update
        apt-get install -y kubelet=1.28.2-00 kubeadm=1.28.2-00 kubectl=1.28.2-00
        apt-mark hold kubelet kubeadm kubectl
        
        # Install containerd
        apt-get update
        apt-get install -y containerd.io
        systemctl enable containerd
        systemctl start containerd
        
        # Configure containerd
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
        systemctl restart containerd
        
        # Enable kubelet
        systemctl enable kubelet

---
# AWS Machine Template for Worker Nodes
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSMachineTemplate
metadata:
  name: aws-worker-machine-template
  namespace: default
spec:
  template:
    spec:
      # Instance Configuration
      instanceType: m5.large
      ami:
        id: "ami-0abcdef1234567890"  # Ubuntu 22.04 LTS (update with latest AMI)
      
      # Security Groups
      securityGroupSelector:
        matchLabels:
          "sigs.k8s.io/cluster-api-provider-aws/cluster/trustram-aws": "owned"
          "sigs.k8s.io/cluster-api-provider-aws/role": "node"
      
      # SSH Configuration
      sshKeyName: "trustram-keypair"
      
      # Root Volume
      rootVolume:
        size: 100
        type: gp3
        iops: 3000
        throughput: 125
        encrypted: true
      
      # Spot Instance Configuration for Cost Optimization
      spotMarketOptions:
        maxPrice: "0.10"
      
      # Instance Metadata Options
      instanceMetadataOptions:
        httpEndpoint: "enabled"
        httpPutResponseHopLimit: 2
        httpTokens: "required"
      
      # User Data for Kubernetes Bootstrap
      userData: |
        #!/bin/bash
        set -e
        
        # Install kubeadm, kubelet, kubectl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
        apt-get update
        apt-get install -y kubelet=1.28.2-00 kubeadm=1.28.2-00 kubectl=1.28.2-00
        apt-mark hold kubelet kubeadm kubectl
        
        # Install containerd
        apt-get update
        apt-get install -y containerd.io
        systemctl enable containerd
        systemctl start containerd
        
        # Configure containerd
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
        systemctl restart containerd
        
        # Enable kubelet
        systemctl enable kubelet
