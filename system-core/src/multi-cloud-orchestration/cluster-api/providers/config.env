# Multi-Cloud Cluster API Provider Configuration
# This file contains environment variables and configuration for CAPI providers

# =============================================================================
# GENERAL CONFIGURATION
# =============================================================================

# Cluster API Version
export CAPI_VERSION="v1.5.3"

# Provider Versions
export CAPA_VERSION="v2.2.1"  # AWS Provider
export CAPZ_VERSION="v1.11.3"  # Azure Provider
export CAPG_VERSION="v1.5.1"   # GCP Provider

# Management Cluster Configuration
export MANAGEMENT_CLUSTER_NAME="trustram-management"
export KUBERNETES_VERSION="v1.28.2"

# =============================================================================
# AWS CONFIGURATION
# =============================================================================

# AWS Credentials (Set these in your environment)
# export AWS_ACCESS_KEY_ID="your-access-key-id"
# export AWS_SECRET_ACCESS_KEY="your-secret-access-key"
# export AWS_SESSION_TOKEN="your-session-token"  # Optional, for temporary credentials
# export AWS_REGION="us-west-2"

# AWS Cluster Configuration
export AWS_CLUSTER_NAME="trustram-aws-cluster"
export AWS_NODE_MACHINE_TYPE="m5.large"
export AWS_CONTROL_PLANE_MACHINE_TYPE="m5.xlarge"
export AWS_SSH_KEY_NAME="trustram-keypair"

# AWS Network Configuration
export AWS_VPC_CIDR="10.0.0.0/16"
export AWS_PUBLIC_SUBNET_CIDR="10.0.1.0/24,10.0.2.0/24,10.0.3.0/24"
export AWS_PRIVATE_SUBNET_CIDR="10.0.11.0/24,10.0.12.0/24,10.0.13.0/24"

# =============================================================================
# AZURE CONFIGURATION
# =============================================================================

# Azure Credentials (Set these in your environment)
# export AZURE_SUBSCRIPTION_ID="your-subscription-id"
# export AZURE_TENANT_ID="your-tenant-id"
# export AZURE_CLIENT_ID="your-client-id"
# export AZURE_CLIENT_SECRET="your-client-secret"

# Azure Cluster Configuration
export AZURE_CLUSTER_NAME="trustram-azure-cluster"
export AZURE_RESOURCE_GROUP="trustram-v44-rg"
export AZURE_LOCATION="West US 2"
export AZURE_NODE_MACHINE_TYPE="Standard_D2s_v3"
export AZURE_CONTROL_PLANE_MACHINE_TYPE="Standard_D4s_v3"

# Azure Network Configuration
export AZURE_VNET_CIDR="10.1.0.0/16"
export AZURE_CONTROL_PLANE_SUBNET_CIDR="10.1.0.0/24"
export AZURE_NODE_SUBNET_CIDR="10.1.1.0/24"

# =============================================================================
# GCP CONFIGURATION
# =============================================================================

# GCP Credentials (Set this in your environment)
# export GOOGLE_APPLICATION_CREDENTIALS="/path/to/service-account-key.json"
# export GCP_PROJECT_ID="your-project-id"
# export GCP_REGION="us-west1"

# GCP Cluster Configuration
export GCP_CLUSTER_NAME="trustram-gcp-cluster"
export GCP_PROJECT="trustram-v44-project"
export GCP_REGION="us-west1"
export GCP_NODE_MACHINE_TYPE="n2-standard-2"
export GCP_CONTROL_PLANE_MACHINE_TYPE="n2-standard-4"

# GCP Network Configuration
export GCP_NETWORK_NAME="trustram-network"
export GCP_CONTROL_PLANE_SUBNET_CIDR="10.2.0.0/24"
export GCP_NODE_SUBNET_CIDR="10.2.1.0/24"

# =============================================================================
# MULTI-CLOUD ORCHESTRATION SETTINGS
# =============================================================================

# Feature Flags
export ENABLE_COST_OPTIMIZATION="true"
export ENABLE_SPOT_INSTANCES="true"
export ENABLE_AUTO_SCALING="true"
export ENABLE_MULTI_ZONE="true"

# Cost Optimization Settings
export AWS_SPOT_MAX_PRICE="0.10"
export AZURE_SPOT_MAX_PRICE="-1"  # Use current spot price
export GCP_PREEMPTIBLE_INSTANCES="true"

# Auto-scaling Settings
export MIN_WORKER_NODES="3"
export MAX_WORKER_NODES="10"
export AUTO_SCALE_ENABLED="true"

# High Availability Settings
export CONTROL_PLANE_REPLICAS="3"
export WORKER_NODE_REPLICAS="3"
export ENABLE_MULTI_AZ="true"

# =============================================================================
# NETWORKING CONFIGURATION
# =============================================================================

# Kubernetes Networking
export POD_CIDR="192.168.0.0/16"
export SERVICE_CIDR="10.96.0.0/12"
export SERVICE_DOMAIN="cluster.local"

# CNI Configuration
export CNI_PROVIDER="calico"
export CNI_VERSION="v3.26.1"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Encryption Settings
export ENABLE_ENCRYPTION_AT_REST="true"
export ENABLE_ENCRYPTION_IN_TRANSIT="true"

# RBAC Settings
export ENABLE_RBAC="true"
export ENABLE_POD_SECURITY_POLICY="true"

# Network Security
export ENABLE_NETWORK_POLICIES="true"
export ENABLE_ADMISSION_CONTROLLERS="true"

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================

# Monitoring Settings
export ENABLE_MONITORING="true"
export ENABLE_LOGGING="true"
export ENABLE_METRICS="true"

# Log Retention
export LOG_RETENTION_DAYS="30"
export AUDIT_LOG_RETENTION_DAYS="90"

# =============================================================================
# DATA RESIDENCY AND COMPLIANCE
# =============================================================================

# Data Residency Settings
export DATA_RESIDENCY_ENFORCEMENT="true"
export ALLOWED_REGIONS="us-west-2,westus2,us-west1"

# Compliance Settings
export COMPLIANCE_MODE="production"
export ENABLE_AUDIT_LOGGING="true"
export ENABLE_COMPLIANCE_MONITORING="true"

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Container Runtime
export CONTAINER_RUNTIME="containerd"
export CONTAINERD_VERSION="1.7.8"

# etcd Configuration
export ETCD_QUOTA_BACKEND_BYTES="8589934592"  # 8GB
export ETCD_AUTO_COMPACTION_RETENTION="8"

# API Server Configuration
export API_SERVER_TIMEOUT="20m"
export ENABLE_FEATURE_GATES="CSIMigration=true,CSIMigrationGCE=true"

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================

# Function to validate AWS configuration
validate_aws_config() {
    local errors=0
    
    if [ -z "$AWS_ACCESS_KEY_ID" ]; then
        echo "ERROR: AWS_ACCESS_KEY_ID is not set"
        errors=$((errors + 1))
    fi
    
    if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
        echo "ERROR: AWS_SECRET_ACCESS_KEY is not set"
        errors=$((errors + 1))
    fi
    
    if [ -z "$AWS_REGION" ]; then
        echo "WARNING: AWS_REGION is not set, using default: us-west-2"
        export AWS_REGION="us-west-2"
    fi
    
    return $errors
}

# Function to validate Azure configuration
validate_azure_config() {
    local errors=0
    
    if [ -z "$AZURE_SUBSCRIPTION_ID" ]; then
        echo "ERROR: AZURE_SUBSCRIPTION_ID is not set"
        errors=$((errors + 1))
    fi
    
    if [ -z "$AZURE_TENANT_ID" ]; then
        echo "ERROR: AZURE_TENANT_ID is not set"
        errors=$((errors + 1))
    fi
    
    if [ -z "$AZURE_CLIENT_ID" ]; then
        echo "ERROR: AZURE_CLIENT_ID is not set"
        errors=$((errors + 1))
    fi
    
    if [ -z "$AZURE_CLIENT_SECRET" ]; then
        echo "ERROR: AZURE_CLIENT_SECRET is not set"
        errors=$((errors + 1))
    fi
    
    return $errors
}

# Function to validate GCP configuration
validate_gcp_config() {
    local errors=0
    
    if [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
        echo "ERROR: GOOGLE_APPLICATION_CREDENTIALS is not set"
        errors=$((errors + 1))
    elif [ ! -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
        echo "ERROR: GOOGLE_APPLICATION_CREDENTIALS file does not exist: $GOOGLE_APPLICATION_CREDENTIALS"
        errors=$((errors + 1))
    fi
    
    if [ -z "$GCP_PROJECT_ID" ]; then
        echo "ERROR: GCP_PROJECT_ID is not set"
        errors=$((errors + 1))
    fi
    
    if [ -z "$GCP_REGION" ]; then
        echo "WARNING: GCP_REGION is not set, using default: us-west1"
        export GCP_REGION="us-west1"
    fi
    
    return $errors
}

# Function to validate all configurations
validate_all_configs() {
    echo "Validating multi-cloud configurations..."
    
    local aws_errors=0
    local azure_errors=0
    local gcp_errors=0
    
    echo "\n=== AWS Configuration ==="
    validate_aws_config || aws_errors=$?
    
    echo "\n=== Azure Configuration ==="
    validate_azure_config || azure_errors=$?
    
    echo "\n=== GCP Configuration ==="
    validate_gcp_config || gcp_errors=$?
    
    local total_errors=$((aws_errors + azure_errors + gcp_errors))
    
    if [ $total_errors -eq 0 ]; then
        echo "\n✅ All configurations are valid!"
        return 0
    else
        echo "\n❌ Found $total_errors configuration errors. Please fix them before proceeding."
        return 1
    fi
}

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

# Function to display current configuration
show_config() {
    echo "Current Multi-Cloud CAPI Configuration:"
    echo "=====================================\n"
    
    echo "General Settings:"
    echo "  - CAPI Version: $CAPI_VERSION"
    echo "  - Kubernetes Version: $KUBERNETES_VERSION"
    echo "  - Management Cluster: $MANAGEMENT_CLUSTER_NAME"
    echo ""
    
    echo "AWS Settings:"
    echo "  - Cluster Name: $AWS_CLUSTER_NAME"
    echo "  - Region: ${AWS_REGION:-'Not set'}"
    echo "  - Control Plane Type: $AWS_CONTROL_PLANE_MACHINE_TYPE"
    echo "  - Worker Node Type: $AWS_NODE_MACHINE_TYPE"
    echo ""
    
    echo "Azure Settings:"
    echo "  - Cluster Name: $AZURE_CLUSTER_NAME"
    echo "  - Location: $AZURE_LOCATION"
    echo "  - Control Plane Type: $AZURE_CONTROL_PLANE_MACHINE_TYPE"
    echo "  - Worker Node Type: $AZURE_NODE_MACHINE_TYPE"
    echo ""
    
    echo "GCP Settings:"
    echo "  - Cluster Name: $GCP_CLUSTER_NAME"
    echo "  - Region: $GCP_REGION"
    echo "  - Control Plane Type: $GCP_CONTROL_PLANE_MACHINE_TYPE"
    echo "  - Worker Node Type: $GCP_NODE_MACHINE_TYPE"
    echo ""
    
    echo "Feature Flags:"
    echo "  - Cost Optimization: $ENABLE_COST_OPTIMIZATION"
    echo "  - Spot Instances: $ENABLE_SPOT_INSTANCES"
    echo "  - Auto Scaling: $ENABLE_AUTO_SCALING"
    echo "  - Multi-Zone: $ENABLE_MULTI_ZONE"
}

# Source this file to load the configuration:
# source /workspace/src/multi-cloud-orchestration/cluster-api/providers/config.env
