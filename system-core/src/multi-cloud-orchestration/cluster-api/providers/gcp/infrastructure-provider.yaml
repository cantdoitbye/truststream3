# GCP Infrastructure Provider Configuration for Cluster API
# This configures the GCP infrastructure provider for CAPI
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPClusterTemplate
metadata:
  name: gcp-cluster-template
  namespace: default
spec:
  template:
    spec:
      # GCP Project and Region
      project: "trustram-v44-project"  # Replace with actual project ID
      region: "us-west1"
      
      # Network Configuration
      network:
        name: "trustram-network"
        autoCreateSubnetworks: false
        
      # Subnet Configuration
      subnets:
      - name: "trustram-control-plane-subnet"
        cidrBlock: "10.2.0.0/24"
        region: "us-west1"
        description: "Subnet for control plane nodes"
        enableFlowLogs: true
        privateGoogleAccess: true
        purpose: "PRIVATE"
      - name: "trustram-worker-subnet"
        cidrBlock: "10.2.1.0/24"
        region: "us-west1"
        description: "Subnet for worker nodes"
        enableFlowLogs: true
        privateGoogleAccess: true
        purpose: "PRIVATE"
      
      # Control Plane Load Balancer
      controlPlaneEndpoint:
        host: ""
        port: 6443
      
      # Firewall Rules
      additionalLabels:
        "goog-gke-cluster": "trustram-gcp-cluster"
        "environment": "production"
        "project": "multi-cloud-orchestration"
        "trustram-version": "v4.4"

---
# GCP Machine Template for Control Plane
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPMachineTemplate
metadata:
  name: gcp-control-plane-machine-template
  namespace: default
spec:
  template:
    spec:
      # Instance Configuration
      machineType: "n2-standard-4"
      
      # Boot Disk Configuration
      rootDisk:
        diskSizeGb: 50
        diskType: "pd-ssd"
        encryptionKey:
          kmsKeyName: ""  # Optional: specify KMS key for encryption
      
      # VM Image
      image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts"
      
      # Network Configuration
      subnet: "trustram-control-plane-subnet"
      
      # Preemptible Instance Configuration (for cost optimization in dev/test)
      preemptible: false  # Set to true for non-production environments
      
      # Service Account
      serviceAccounts:
      - email: "trustram-cluster-sa@trustram-v44-project.iam.gserviceaccount.com"
        scopes:
        - "https://www.googleapis.com/auth/cloud-platform"
      
      # Metadata and Labels
      additionalMetadata:
        enable-oslogin: "true"
        enable-ip-forwarding: "true"
        startup-script: |
          #!/bin/bash
          set -e
          
          # Update system
          apt-get update
          apt-get upgrade -y
          
          # Install Google Cloud SDK
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          apt-get update
          apt-get install -y google-cloud-cli
          
          # Install Docker
          apt-get install -y docker.io
          systemctl enable docker
          systemctl start docker
          
          # Install kubeadm, kubelet, kubectl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
          apt-get update
          apt-get install -y kubelet=1.28.2-00 kubeadm=1.28.2-00 kubectl=1.28.2-00
          apt-mark hold kubelet kubeadm kubectl
          
          # Install and configure containerd
          apt-get install -y containerd.io
          mkdir -p /etc/containerd
          containerd config default > /etc/containerd/config.toml
          
          # Configure containerd for systemd cgroup driver
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
          
          systemctl restart containerd
          systemctl enable containerd
          
          # Enable kubelet
          systemctl enable kubelet
      
      additionalLabels:
        "goog-gke-node": "trustram-control-plane"
        "environment": "production"
        "node-type": "control-plane"
      
      # Network Tags for Firewall Rules
      additionalNetworkTags:
      - "trustram-cluster"
      - "trustram-control-plane"
      - "kubernetes-cluster"

---
# GCP Machine Template for Worker Nodes
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPMachineTemplate
metadata:
  name: gcp-worker-machine-template
  namespace: default
spec:
  template:
    spec:
      # Instance Configuration - Using smaller instances for workers
      machineType: "n2-standard-2"
      
      # Boot Disk Configuration
      rootDisk:
        diskSizeGb: 100
        diskType: "pd-standard"  # Standard disk for cost optimization
        encryptionKey:
          kmsKeyName: ""  # Optional: specify KMS key for encryption
      
      # Additional Disks for Container Storage
      additionalDisks:
      - name: "container-disk"
        diskSizeGb: 50
        diskType: "pd-ssd"
        encrypted: true
      
      # VM Image
      image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts"
      
      # Network Configuration
      subnet: "trustram-worker-subnet"
      
      # Preemptible Instance Configuration for Cost Optimization
      preemptible: true  # Use preemptible instances for cost savings
      
      # Service Account
      serviceAccounts:
      - email: "trustram-worker-sa@trustram-v44-project.iam.gserviceaccount.com"
        scopes:
        - "https://www.googleapis.com/auth/cloud-platform"
        - "https://www.googleapis.com/auth/logging.write"
        - "https://www.googleapis.com/auth/monitoring"
      
      # Metadata and Labels
      additionalMetadata:
        enable-oslogin: "true"
        enable-ip-forwarding: "true"
        startup-script: |
          #!/bin/bash
          set -e
          
          # Update system
          apt-get update
          apt-get upgrade -y
          
          # Install Google Cloud SDK
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          apt-get update
          apt-get install -y google-cloud-cli
          
          # Install Docker
          apt-get install -y docker.io
          systemctl enable docker
          systemctl start docker
          
          # Install kubeadm, kubelet, kubectl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
          apt-get update
          apt-get install -y kubelet=1.28.2-00 kubeadm=1.28.2-00 kubectl=1.28.2-00
          apt-mark hold kubelet kubeadm kubectl
          
          # Install and configure containerd
          apt-get install -y containerd.io
          mkdir -p /etc/containerd
          containerd config default > /etc/containerd/config.toml
          
          # Configure containerd for systemd cgroup driver
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
          
          systemctl restart containerd
          systemctl enable containerd
          
          # Enable kubelet
          systemctl enable kubelet
          
          # Mount additional disk for container storage
          mkdir -p /var/lib/containers
          mkfs.ext4 /dev/disk/by-id/google-container-disk
          mount /dev/disk/by-id/google-container-disk /var/lib/containers
          echo '/dev/disk/by-id/google-container-disk /var/lib/containers ext4 defaults 0 0' >> /etc/fstab
      
      additionalLabels:
        "goog-gke-node": "trustram-worker"
        "environment": "production"
        "node-type": "worker"
      
      # Network Tags for Firewall Rules
      additionalNetworkTags:
      - "trustram-cluster"
      - "trustram-worker"
      - "kubernetes-cluster"

---
# GCP Managed Instance Group Template for Auto-scaling Workers
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPManagedMachinePool
metadata:
  name: gcp-worker-managed-pool
  namespace: default
spec:
  # Scaling Configuration
  scaling:
    minSize: 3
    maxSize: 10
    
  # Instance Template
  instanceTemplate:
    machineType: "n2-standard-2"
    
    # Boot Disk
    disk:
      diskSizeGb: 100
      diskType: "pd-standard"
      
    # Image
    sourceImage: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts"
    
    # Network
    subnet: "trustram-worker-subnet"
    
    # Preemptible for Cost Optimization
    preemptible: true
    
    # Service Account
    serviceAccount:
      email: "trustram-worker-sa@trustram-v44-project.iam.gserviceaccount.com"
      scopes:
      - "https://www.googleapis.com/auth/cloud-platform"
    
    # Labels
    labels:
      "trustram-cluster": "worker-pool"
      "environment": "production"
      "cost-optimization": "preemptible"
    
    # Network Tags
    tags:
    - "trustram-cluster"
    - "trustram-worker"
    - "kubernetes-cluster"
