# Circuit Breaker Implementation with Graceful Degradation

apiVersion: apps/v1
kind: Deployment
metadata:
  name: circuit-breaker
  namespace: failover-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: circuit-breaker
  template:
    metadata:
      labels:
        app: circuit-breaker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: circuit-breaker
      containers:
      - name: circuit-breaker
        image: quay.io/trustram/circuit-breaker:v4.4.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: FAILURE_THRESHOLD
          value: "5"
        - name: SUCCESS_THRESHOLD
          value: "3"
        - name: TIMEOUT_DURATION
          value: "60"
        - name: HALF_OPEN_MAX_CALLS
          value: "10"
        - name: PROMETHEUS_URL
          value: "http://prometheus.monitoring.svc.cluster.local:9090"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        volumeMounts:
        - name: config
          mountPath: /etc/config
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: circuit-breaker-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: circuit-breaker
  namespace: failover-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: circuit-breaker
rules:
- apiGroups: ["networking.istio.io"]
  resources: ["virtualservices", "destinationrules"]
  verbs: ["get", "list", "watch", "create", "patch", "update"]
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: circuit-breaker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: circuit-breaker
subjects:
- kind: ServiceAccount
  name: circuit-breaker
  namespace: failover-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: circuit-breaker-config
  namespace: failover-system
data:
  config.yaml: |
    circuit_breakers:
      - name: "trustram_api"
        service: "trustram-api.trustram-system.svc.cluster.local"
        failure_threshold: 5
        success_threshold: 3
        timeout: 60  # seconds
        half_open_max_calls: 10
        metrics:
          - "http_requests_total"
          - "http_request_duration_seconds"
        failure_conditions:
          - "http_status >= 500"
          - "response_time > 5000"  # ms
          - "connection_timeout"
        degradation_strategy:
          - type: "cached_response"
            ttl: 300  # 5 minutes
            fallback_data: "/etc/fallback/api_responses.json"
          - type: "simplified_response"
            fields: ["id", "name", "status"]
          - type: "static_response"
            status_code: 503
            message: "Service temporarily unavailable"
      
      - name: "database_connection"
        service: "postgresql.database.svc.cluster.local"
        failure_threshold: 3
        success_threshold: 2
        timeout: 30
        half_open_max_calls: 5
        failure_conditions:
          - "connection_error"
          - "query_timeout > 10000"  # ms
          - "max_connections_reached"
        degradation_strategy:
          - type: "read_replica"
            endpoint: "postgresql-replica.database.svc.cluster.local"
          - type: "cached_data"
            ttl: 600  # 10 minutes
            cache_backend: "redis"
          - type: "queue_writes"
            queue: "database_writes"
            max_queue_size: 1000
      
      - name: "external_api"
        service: "external-api.trustram.com"
        failure_threshold: 3
        success_threshold: 2
        timeout: 45
        half_open_max_calls: 5
        failure_conditions:
          - "http_status >= 400"
          - "dns_resolution_error"
          - "ssl_handshake_error"
        degradation_strategy:
          - type: "local_cache"
            ttl: 1800  # 30 minutes
            max_size: "100MB"
          - type: "alternative_service"
            endpoint: "backup-api.trustram.com"
          - type: "default_response"
            response: '{"status": "unavailable", "retry_after": 300}'
    
    graceful_degradation:
      levels:
        - name: "level_1_minimal_impact"
          priority: 1
          conditions:
            - "error_rate > 0.01"  # 1%
            - "latency_p95 > 500"   # ms
          actions:
            - "disable_non_critical_features"
            - "increase_cache_ttl"
            - "reduce_log_verbosity"
        
        - name: "level_2_moderate_impact"
          priority: 2
          conditions:
            - "error_rate > 0.05"  # 5%
            - "latency_p95 > 1000"  # ms
          actions:
            - "serve_cached_responses"
            - "disable_real_time_features"
            - "reduce_data_refresh_rate"
        
        - name: "level_3_significant_impact"
          priority: 3
          conditions:
            - "error_rate > 0.1"   # 10%
            - "latency_p95 > 2000"  # ms
          actions:
            - "serve_static_content"
            - "disable_write_operations"
            - "show_maintenance_page"
        
        - name: "level_4_emergency"
          priority: 4
          conditions:
            - "error_rate > 0.25"  # 25%
            - "service_unavailable"
          actions:
            - "activate_disaster_recovery"
            - "redirect_to_backup_site"
            - "notify_incident_team"
    
    feature_flags:
      - name: "real_time_notifications"
        enabled: true
        degradation_level: 2
        fallback: "batch_notifications"
      
      - name: "advanced_analytics"
        enabled: true
        degradation_level: 1
        fallback: "basic_analytics"
      
      - name: "image_processing"
        enabled: true
        degradation_level: 2
        fallback: "original_images"
      
      - name: "search_autocomplete"
        enabled: true
        degradation_level: 1
        fallback: "basic_search"
    
    caching:
      strategies:
        - name: "response_cache"
          type: "http_response"
          ttl: 300  # 5 minutes
          max_size: "500MB"
          eviction_policy: "lru"
        
        - name: "database_cache"
          type: "query_result"
          ttl: 600  # 10 minutes
          max_size: "1GB"
          eviction_policy: "lfu"
        
        - name: "static_content_cache"
          type: "file_cache"
          ttl: 3600  # 1 hour
          max_size: "2GB"
          eviction_policy: "fifo"
    
    monitoring:
      metrics:
        - name: "circuit_breaker_state"
          type: "gauge"
          labels: ["service", "breaker_name"]
        
        - name: "circuit_breaker_failures"
          type: "counter"
          labels: ["service", "failure_type"]
        
        - name: "degradation_level"
          type: "gauge"
          labels: ["service"]
        
        - name: "fallback_requests"
          type: "counter"
          labels: ["service", "fallback_type"]
      
      alerts:
        - name: "circuit_breaker_open"
          condition: "circuit_breaker_state == 1"
          severity: "warning"
          duration: "1m"
        
        - name: "degradation_level_high"
          condition: "degradation_level >= 3"
          severity: "critical"
          duration: "30s"
        
        - name: "frequent_fallbacks"
          condition: "rate(fallback_requests[5m]) > 100"
          severity: "warning"
          duration: "2m"

---
# Istio Configuration for Circuit Breaking
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: circuit-breaker-global
  namespace: failover-system
spec:
  host: "*.trustram.local"
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 10
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
        minHealthPercent: 50
    outlierDetection:
      consecutive5xxErrors: 3
      consecutiveGatewayErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 50
      splitExternalLocalOriginErrors: true

---
# Health Check Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-checker
  namespace: failover-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: health-checker
  template:
    metadata:
      labels:
        app: health-checker
    spec:
      serviceAccountName: health-checker
      containers:
      - name: health-checker
        image: quay.io/trustram/health-checker:v4.4.0
        ports:
        - containerPort: 8080
        env:
        - name: CHECK_INTERVAL
          value: "5"  # seconds
        - name: TIMEOUT
          value: "10" # seconds
        - name: RETRY_COUNT
          value: "3"
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: health-check-config
          mountPath: /etc/config
      volumes:
      - name: health-check-config
        configMap:
          name: health-check-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: health-checker
  namespace: failover-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-config
  namespace: failover-system
data:
  checks.yaml: |
    health_checks:
      - name: "api_endpoint"
        url: "http://trustram-api.trustram-system.svc.cluster.local:8080/health"
        method: "GET"
        timeout: 5
        interval: 5
        expected_status: 200
        expected_response_time: 1000  # ms
      
      - name: "database_connection"
        url: "http://trustram-api.trustram-system.svc.cluster.local:8080/health/database"
        method: "GET"
        timeout: 10
        interval: 10
        expected_status: 200
      
      - name: "external_dependencies"
        url: "http://trustram-api.trustram-system.svc.cluster.local:8080/health/dependencies"
        method: "GET"
        timeout: 15
        interval: 30
        expected_status: 200
      
      - name: "cross_cluster_connectivity"
        type: "tcp"
        host: "istio-eastwestgateway.istio-system.svc.cluster.local"
        port: 15443
        timeout: 5
        interval: 15
    
    notification:
      channels:
        - type: "prometheus"
          endpoint: "http://prometheus.monitoring.svc.cluster.local:9090"
        - type: "webhook"
          endpoint: "http://failover-controller.failover-system.svc.cluster.local:8080/webhook"
      
      severity_levels:
        - name: "info"
          threshold: 1
        - name: "warning"
          threshold: 3
        - name: "critical"
          threshold: 5