-- AI Predictive Insights Table
-- Stores predictive insights generated by the analytics engine

CREATE TABLE ai_predictive_insights (
    insight_id VARCHAR(255) PRIMARY KEY,
    insight_type VARCHAR(100) NOT NULL CHECK (insight_type IN (
        'capacity_planning', 'performance_prediction', 
        'cost_optimization', 'maintenance_schedule'
    )),
    entity_type VARCHAR(50) NOT NULL CHECK (entity_type IN ('agent', 'model', 'system')),
    entity_id VARCHAR(255),
    prediction TEXT NOT NULL,
    confidence DECIMAL(5,4) NOT NULL CHECK (confidence >= 0 AND confidence <= 1),
    time_horizon VARCHAR(50) NOT NULL,
    impact_assessment TEXT,
    recommended_actions TEXT[] DEFAULT '{}',
    supporting_data JSONB DEFAULT '{}',
    prediction_model VARCHAR(100),
    model_accuracy DECIMAL(5,4) CHECK (model_accuracy >= 0 AND model_accuracy <= 1),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ NOT NULL,
    validated BOOLEAN DEFAULT FALSE,
    validation_result JSONB,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Indexes
    INDEX idx_ai_insights_insight_type (insight_type),
    INDEX idx_ai_insights_entity_type (entity_type),
    INDEX idx_ai_insights_entity_id (entity_id),
    INDEX idx_ai_insights_created_at (created_at),
    INDEX idx_ai_insights_expires_at (expires_at),
    INDEX idx_ai_insights_confidence (confidence),
    INDEX idx_ai_insights_active (expires_at) WHERE expires_at > NOW()
);

-- Row Level Security
ALTER TABLE ai_predictive_insights ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Enable read access for all users" ON ai_predictive_insights
    FOR SELECT USING (true);

CREATE POLICY "Enable insert for authenticated users" ON ai_predictive_insights
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Enable update for authenticated users" ON ai_predictive_insights
    FOR UPDATE USING (auth.role() = 'authenticated');

-- Trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_ai_insights_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_ai_insights_updated_at
    BEFORE UPDATE ON ai_predictive_insights
    FOR EACH ROW
    EXECUTE FUNCTION update_ai_insights_updated_at();

-- Cleanup expired insights function
CREATE OR REPLACE FUNCTION cleanup_expired_insights()
RETURNS void AS $$
BEGIN
    DELETE FROM ai_predictive_insights 
    WHERE expires_at < NOW() - INTERVAL '7 days';
END;
$$ LANGUAGE plpgsql;

-- Schedule cleanup to run daily
-- This would typically be set up as a cron job or scheduled function

-- Comments
COMMENT ON TABLE ai_predictive_insights IS 'Stores predictive insights generated by the analytics engine';
COMMENT ON COLUMN ai_predictive_insights.insight_id IS 'Unique identifier for the insight';
COMMENT ON COLUMN ai_predictive_insights.insight_type IS 'Type of predictive insight';
COMMENT ON COLUMN ai_predictive_insights.entity_type IS 'Type of entity the insight relates to';
COMMENT ON COLUMN ai_predictive_insights.entity_id IS 'ID of the entity the insight relates to';
COMMENT ON COLUMN ai_predictive_insights.prediction IS 'The predictive insight text';
COMMENT ON COLUMN ai_predictive_insights.confidence IS 'Confidence level of the prediction (0-1)';
COMMENT ON COLUMN ai_predictive_insights.time_horizon IS 'Time horizon for the prediction';
COMMENT ON COLUMN ai_predictive_insights.impact_assessment IS 'Assessment of the predicted impact';
COMMENT ON COLUMN ai_predictive_insights.recommended_actions IS 'Array of recommended actions';
COMMENT ON COLUMN ai_predictive_insights.supporting_data IS 'JSON object containing supporting data';
COMMENT ON COLUMN ai_predictive_insights.prediction_model IS 'Name of the model used for prediction';
COMMENT ON COLUMN ai_predictive_insights.model_accuracy IS 'Accuracy of the prediction model';
COMMENT ON COLUMN ai_predictive_insights.expires_at IS 'When this insight expires';
COMMENT ON COLUMN ai_predictive_insights.validated IS 'Whether this insight has been validated';
COMMENT ON COLUMN ai_predictive_insights.validation_result IS 'Results of insight validation';
