{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "description": "TrustStram v4.4 Enterprise Infrastructure Template for Azure",
        "author": "TrustStram Enterprise Team"
    },
    "parameters": {
        "projectName": {
            "type": "string",
            "defaultValue": "truststream-v44",
            "metadata": {
                "description": "Base name for all resources"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "production",
            "allowedValues": [
                "development",
                "staging",
                "production"
            ],
            "metadata": {
                "description": "Environment type"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "aksNodeCount": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "Number of AKS nodes"
            }
        },
        "aksNodeSize": {
            "type": "string",
            "defaultValue": "Standard_D4s_v3",
            "allowedValues": [
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3"
            ],
            "metadata": {
                "description": "AKS node VM size"
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.28.3",
            "metadata": {
                "description": "Kubernetes version"
            }
        },
        "postgresSku": {
            "type": "string",
            "defaultValue": "Standard_D4s_v3",
            "allowedValues": [
                "Standard_B2s",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3"
            ],
            "metadata": {
                "description": "PostgreSQL SKU"
            }
        },
        "postgresVersion": {
            "type": "string",
            "defaultValue": "14",
            "allowedValues": [
                "13",
                "14",
                "15"
            ],
            "metadata": {
                "description": "PostgreSQL version"
            }
        },
        "storageSizeGB": {
            "type": "int",
            "defaultValue": 128,
            "minValue": 32,
            "maxValue": 1024,
            "metadata": {
                "description": "PostgreSQL storage size in GB"
            }
        },
        "enableBackup": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable backup for PostgreSQL"
            }
        },
        "enableMonitoring": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable Azure Monitor and Application Insights"
            }
        },
        "enableHighAvailability": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable high availability features"
            }
        },
        "databaseAdminUsername": {
            "type": "string",
            "defaultValue": "truststream_admin",
            "metadata": {
                "description": "Database administrator username"
            }
        },
        "databaseAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Database administrator password"
            }
        }
    },
    "variables": {
        "resourcePrefix": "[concat(parameters('projectName'), '-', parameters('environment'))]",
        "aksClusterName": "[concat(variables('resourcePrefix'), '-aks')]",
        "acrName": "[concat(replace(parameters('projectName'), '-', ''), parameters('environment'), 'acr', uniqueString(resourceGroup().id))]",
        "keyVaultName": "[concat(variables('resourcePrefix'), '-kv-', uniqueString(resourceGroup().id))]",
        "postgresServerName": "[concat(variables('resourcePrefix'), '-postgres-', uniqueString(resourceGroup().id))]",
        "storageAccountName": "[concat(replace(parameters('projectName'), '-', ''), parameters('environment'), 'storage', uniqueString(resourceGroup().id))]",
        "appInsightsName": "[concat(variables('resourcePrefix'), '-insights')]",
        "logAnalyticsName": "[concat(variables('resourcePrefix'), '-logs')]",
        "vnetName": "[concat(variables('resourcePrefix'), '-vnet')]",
        "subnetName": "[concat(variables('resourcePrefix'), '-subnet')]",
        "nsgName": "[concat(variables('resourcePrefix'), '-nsg')]",
        "publicIpName": "[concat(variables('resourcePrefix'), '-pip')]",
        "loadBalancerName": "[concat(variables('resourcePrefix'), '-lb')]",
        "appGatewayName": "[concat(variables('resourcePrefix'), '-appgw')]",
        "cosmosDbName": "[concat(variables('resourcePrefix'), '-cosmos')]",
        "redisCacheName": "[concat(variables('resourcePrefix'), '-redis')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2021-02-01",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "10.0.1.0/24",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "aks-subnet",
                        "properties": {
                            "addressPrefix": "10.0.2.0/24"
                        }
                    },
                    {
                        "name": "appgw-subnet",
                        "properties": {
                            "addressPrefix": "10.0.3.0/24"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            ],
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-02-01",
            "name": "[variables('nsgName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHTTPS",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowHTTP",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowSSH",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2021-09-01",
            "name": "[variables('acrName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Premium"
            },
            "properties": {
                "adminUserEnabled": true,
                "policies": {
                    "quarantinePolicy": {
                        "status": "enabled"
                    },
                    "trustPolicy": {
                        "type": "Notary",
                        "status": "enabled"
                    },
                    "retentionPolicy": {
                        "days": 30,
                        "status": "enabled"
                    }
                },
                "encryption": {
                    "status": "enabled",
                    "keyVaultProperties": {
                        "identity": "[concat(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(variables('resourcePrefix'), '-identity')))]",
                        "keyIdentifier": "[concat(reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri, 'keys/acr-encryption-key')]"
                    }
                },
                "publicNetworkAccess": "Enabled",
                "networkRuleBypassOptions": "AzureServices"
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2021-10-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "premium"
                },
                "tenantId": "[subscription().tenantId]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 90,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "Enabled",
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers",
            "apiVersion": "2022-12-01",
            "name": "[variables('postgresServerName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('postgresSku')]",
                "tier": "GeneralPurpose"
            },
            "properties": {
                "createMode": "Default",
                "version": "[parameters('postgresVersion')]",
                "administratorLogin": "[parameters('databaseAdminUsername')]",
                "administratorLoginPassword": "[parameters('databaseAdminPassword')]",
                "storage": {
                    "storageSizeGB": "[parameters('storageSizeGB')]",
                    "tier": "P30"
                },
                "backup": {
                    "backupRetentionDays": "[if(parameters('enableBackup'), 7, 7)]",
                    "geoRedundantBackup": "[if(parameters('enableBackup'), 'Enabled', 'Disabled')]"
                },
                "highAvailability": {
                    "mode": "[if(parameters('enableHighAvailability'), 'ZoneRedundant', 'Disabled')]"
                },
                "network": {
                    "delegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
                    "privateDnsZoneArmResourceId": "[resourceId('Microsoft.Network/privateDnsZones', concat(variables('postgresServerName'), '.private.postgres.database.azure.com'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', concat(variables('postgresServerName'), '.private.postgres.database.azure.com'))]"
            ],
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('postgresServerName'), '.private.postgres.database.azure.com')]",
            "location": "global",
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('postgresServerName'), '.private.postgres.database.azure.com/', variables('vnetName'), '-link')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', concat(variables('postgresServerName'), '.private.postgres.database.azure.com'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                },
                "registrationEnabled": false
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2023-07-01",
            "name": "[variables('aksClusterName')]",
            "location": "[parameters('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[concat(variables('resourcePrefix'), '-dns')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "count": "[parameters('aksNodeCount')]",
                        "vmSize": "[parameters('aksNodeSize')]",
                        "osDiskSizeGB": 128,
                        "osDiskType": "Managed",
                        "kubeletDiskType": "OS",
                        "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'aks-subnet')]",
                        "maxPods": 110,
                        "type": "VirtualMachineScaleSets",
                        "availabilityZones": [
                            "1",
                            "2",
                            "3"
                        ],
                        "enableNodePublicIP": false,
                        "mode": "System",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "enableEncryptionAtHost": true
                    }
                ],
                "servicePrincipalProfile": {
                    "clientId": "msi"
                },
                "networkProfile": {
                    "networkPlugin": "azure",
                    "networkPolicy": "calico",
                    "loadBalancerSku": "standard",
                    "serviceCidr": "10.2.0.0/16",
                    "dnsServiceIP": "10.2.0.10",
                    "dockerBridgeCidr": "172.17.0.1/16"
                },
                "apiServerAccessProfile": {
                    "enablePrivateCluster": false
                },
                "addonProfiles": {
                    "azureKeyvaultSecretsProvider": {
                        "enabled": true,
                        "config": {
                            "enableSecretRotation": "true",
                            "rotationPollInterval": "2m"
                        }
                    },
                    "azurepolicy": {
                        "enabled": true
                    },
                    "omsagent": {
                        "enabled": "[parameters('enableMonitoring')]",
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[if(parameters('enableMonitoring'), resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), json('null'))]"
                        }
                    }
                },
                "autoScalerProfile": {
                    "balance-similar-node-groups": "false",
                    "expander": "random",
                    "max-empty-bulk-delete": "10",
                    "max-graceful-termination-sec": "600",
                    "max-node-provision-time": "15m",
                    "max-total-unready-percentage": "45",
                    "new-pod-scale-up-delay": "0s",
                    "ok-total-unready-count": "3",
                    "scale-down-delay-after-add": "10m",
                    "scale-down-delay-after-delete": "10s",
                    "scale-down-delay-after-failure": "3m",
                    "scale-down-unneeded-time": "10m",
                    "scale-down-unready-time": "20m",
                    "scale-down-utilization-threshold": "0.5",
                    "scan-interval": "10s",
                    "skip-nodes-with-local-storage": "false",
                    "skip-nodes-with-system-pods": "true"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ],
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-09-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "defaultToOAuthAuthentication": false,
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": true,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "condition": "[parameters('enableMonitoring')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2021-12-01-preview",
            "name": "[variables('logAnalyticsName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "pergb2018"
                },
                "retentionInDays": 30,
                "features": {
                    "searchVersion": 1,
                    "legacy": 0,
                    "enableLogAccessUsingOnlyResourcePermissions": true
                }
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "condition": "[parameters('enableMonitoring')]",
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('appInsightsName')]",
            "location": "[parameters('location')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "Request_Source": "rest",
                "WorkspaceResourceId": "[if(parameters('enableMonitoring'), resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), json('null'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ],
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.Cache/redis",
            "apiVersion": "2022-06-01",
            "name": "[variables('redisCacheName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "Premium",
                    "family": "P",
                    "capacity": 1
                },
                "enableNonSslPort": false,
                "minimumTlsVersion": "1.2",
                "redisConfiguration": {
                    "maxclients": "1000",
                    "maxmemory-reserved": "125",
                    "maxfragmentationmemory-reserved": "125",
                    "maxmemory-delta": "125"
                },
                "redisVersion": "6"
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2021-02-01",
            "name": "[variables('publicIpName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('resourcePrefix'), '-', uniqueString(resourceGroup().id))]"
                }
            },
            "tags": {
                "Environment": "[parameters('environment')]",
                "Project": "[parameters('projectName')]"
            }
        }
    ],
    "outputs": {
        "resourceGroupName": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "aksClusterName": {
            "type": "string",
            "value": "[variables('aksClusterName')]"
        },
        "aksClusterFqdn": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))).fqdn]"
        },
        "acrLoginServer": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))).loginServer]"
        },
        "postgresServerName": {
            "type": "string",
            "value": "[variables('postgresServerName')]"
        },
        "postgresServerFqdn": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))).fullyQualifiedDomainName]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "logAnalyticsWorkspaceId": {
            "condition": "[parameters('enableMonitoring')]",
            "type": "string",
            "value": "[if(parameters('enableMonitoring'), resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '')]"
        },
        "applicationInsightsInstrumentationKey": {
            "condition": "[parameters('enableMonitoring')]",
            "type": "string",
            "value": "[if(parameters('enableMonitoring'), reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey, '')]"
        },
        "publicIpAddress": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).ipAddress]"
        },
        "vnetId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        }
    }
}