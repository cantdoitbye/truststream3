AWSTemplateFormatVersion: '2010-09-09'
Description: 'TrustStram v4.4 Enterprise Infrastructure Template for AWS'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
          - Version
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PrivateSubnetCidrs
          - PublicSubnetCidrs
          - AvailabilityZones
      - Label:
          default: "EKS Configuration"
        Parameters:
          - EksVersion
          - NodeGroupInstanceType
          - NodeGroupDesiredCapacity
          - NodeGroupMaxCapacity
          - NodeGroupMinCapacity
      - Label:
          default: "Database Configuration"
        Parameters:
          - RdsInstanceClass
          - RdsAllocatedStorage
          - RdsBackupRetentionPeriod
          - RdsMultiAz
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - EnableCloudWatch
          - EnableXRay
          - LogRetentionDays

Parameters:
  ProjectName:
    Type: String
    Default: truststream-v44
    Description: Base name for all resources
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: Must contain only lowercase letters, numbers, and hyphens

  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment type

  Version:
    Type: String
    Default: '4.4.0'
    Description: Application version

  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for VPC
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$'

  PrivateSubnetCidrs:
    Type: CommaDelimitedList
    Default: '10.0.1.0/24,10.0.2.0/24,10.0.3.0/24'
    Description: CIDR blocks for private subnets

  PublicSubnetCidrs:
    Type: CommaDelimitedList
    Default: '10.0.101.0/24,10.0.102.0/24,10.0.103.0/24'
    Description: CIDR blocks for public subnets

  AvailabilityZones:
    Type: CommaDelimitedList
    Default: 'us-west-2a,us-west-2b,us-west-2c'
    Description: Availability zones to use

  EksVersion:
    Type: String
    Default: '1.28'
    Description: EKS cluster version

  NodeGroupInstanceType:
    Type: String
    Default: 'm5.xlarge'
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
    Description: EC2 instance type for EKS node group

  NodeGroupDesiredCapacity:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Desired number of nodes in the node group

  NodeGroupMaxCapacity:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 20
    Description: Maximum number of nodes in the node group

  NodeGroupMinCapacity:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of nodes in the node group

  RdsInstanceClass:
    Type: String
    Default: 'db.r5.large'
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
    Description: RDS instance class

  RdsAllocatedStorage:
    Type: Number
    Default: 100
    MinValue: 20
    MaxValue: 1000
    Description: RDS allocated storage in GB

  RdsBackupRetentionPeriod:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 35
    Description: RDS backup retention period in days

  RdsMultiAz:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable Multi-AZ deployment for RDS

  EnableCloudWatch:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable CloudWatch monitoring

  EnableXRay:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable X-Ray tracing

  LogRetentionDays:
    Type: Number
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']
  EnableCloudWatchCondition: !Equals [!Ref EnableCloudWatch, 'true']
  EnableXRayCondition: !Equals [!Ref EnableXRay, 'true']
  EnableMultiAz: !Equals [!Ref RdsMultiAz, 'true']

Mappings:
  EnvironmentMap:
    development:
      NodeGroupDesiredCapacity: 2
      NodeGroupMaxCapacity: 4
      RdsInstanceClass: 'db.t3.medium'
    staging:
      NodeGroupDesiredCapacity: 2
      NodeGroupMaxCapacity: 6
      RdsInstanceClass: 'db.r5.large'
    production:
      NodeGroupDesiredCapacity: 3
      NodeGroupMaxCapacity: 10
      RdsInstanceClass: 'db.r5.xlarge'

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-igw'
        - Key: Environment
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Select [0, !Ref PublicSubnetCidrs]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-1'
        - Key: kubernetes.io/role/elb
          Value: '1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Select [1, !Ref PublicSubnetCidrs]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-2'
        - Key: kubernetes.io/role/elb
          Value: '1'

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      CidrBlock: !Select [2, !Ref PublicSubnetCidrs]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-3'
        - Key: kubernetes.io/role/elb
          Value: '1'

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Select [0, !Ref PrivateSubnetCidrs]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-1'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Select [1, !Ref PrivateSubnetCidrs]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-2'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      CidrBlock: !Select [2, !Ref PrivateSubnetCidrs]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-3'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'

  # NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-1'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-2'

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-3'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-2'

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-3'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-routes-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-routes-2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-routes-3'

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  # Security Groups
  EksClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-eks-cluster-sg'

  EksNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref EksClusterSecurityGroup
          Description: All traffic from cluster
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          SourceSecurityGroupId: !Ref EksClusterSecurityGroup
          Description: Node port range
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-eks-node-sg'

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EksNodeSecurityGroup
          Description: PostgreSQL access from EKS nodes
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-rds-sg'

  # IAM Roles
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-eks-cluster-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-eks-cluster-role'

  EksNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-eks-node-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-eks-node-role'

  # EKS Cluster
  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-cluster'
      Version: !Ref EksVersion
      RoleArn: !GetAtt EksClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EksClusterSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        EndpointConfigPublic: true
        EndpointConfigPrivate: true
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      Tags:
        Name: !Sub '${ProjectName}-${Environment}-cluster'
        Environment: !Ref Environment
        Project: !Ref ProjectName

  # EKS Node Group
  EksNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref EksCluster
      NodegroupName: !Sub '${ProjectName}-${Environment}-nodegroup'
      NodeRole: !GetAtt EksNodeRole.Arn
      InstanceTypes:
        - !Ref NodeGroupInstanceType
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      DiskSize: 50
      ScalingConfig:
        DesiredSize: !Ref NodeGroupDesiredCapacity
        MaxSize: !Ref NodeGroupMaxCapacity
        MinSize: !Ref NodeGroupMinCapacity
      UpdateConfig:
        MaxUnavailablePercentage: 25
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
        SourceSecurityGroups:
          - !Ref EksNodeSecurityGroup
      Tags:
        Name: !Sub '${ProjectName}-${Environment}-nodegroup'
        Environment: !Ref Environment
        Project: !Ref ProjectName

  # RDS Subnet Group
  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${ProjectName}-${Environment}-db-subnet-group'
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-db-subnet-group'

  # RDS Instance
  RdsInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-${Environment}-db'
      DBInstanceClass: !Ref RdsInstanceClass
      Engine: postgres
      EngineVersion: '14.9'
      MasterUsername: truststream_admin
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: !Ref RdsAllocatedStorage
      StorageType: gp2
      StorageEncrypted: true
      MultiAZ: !If [EnableMultiAz, true, false]
      PubliclyAccessible: false
      BackupRetentionPeriod: !Ref RdsBackupRetentionPeriod
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'Sun:04:00-Sun:05:00'
      DBSubnetGroupName: !Ref RdsSubnetGroup
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      EnablePerformanceInsights: !If [IsProduction, true, false]
      PerformanceInsightsRetentionPeriod: !If [IsProduction, 7, !Ref 'AWS::NoValue']
      DeletionProtection: !If [IsProduction, true, false]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-db'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ECR Repository
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${ProjectName}/${Environment}'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 7
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ecr'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Log Groups
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableCloudWatchCondition
    Properties:
      LogGroupName: !Sub '/aws/eks/${ProjectName}-${Environment}/application'
      RetentionInDays: !Ref LogRetentionDays

  DatabaseLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableCloudWatchCondition
    Properties:
      LogGroupName: !Sub '/aws/rds/${ProjectName}-${Environment}/postgresql'
      RetentionInDays: !Ref LogRetentionDays

  # S3 Bucket for Application Storage
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-storage-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-storage'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Additional Parameters
  KeyPairName:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::KeyPair::KeyName>
    Default: /truststream/keypair/name
    Description: EC2 Key Pair for SSH access

  DatabasePassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /truststream/database/password
    NoEcho: true
    Description: Database master password

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-${Environment}-vpc-id'

  EksClusterName:
    Description: EKS Cluster Name
    Value: !Ref EksCluster
    Export:
      Name: !Sub '${ProjectName}-${Environment}-eks-cluster-name'

  EksClusterEndpoint:
    Description: EKS Cluster Endpoint
    Value: !GetAtt EksCluster.Endpoint
    Export:
      Name: !Sub '${ProjectName}-${Environment}-eks-cluster-endpoint'

  RdsEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt RdsInstance.Endpoint.Address
    Export:
      Name: !Sub '${ProjectName}-${Environment}-rds-endpoint'

  EcrRepositoryUri:
    Description: ECR Repository URI
    Value: !GetAtt EcrRepository.RepositoryUri
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ecr-uri'

  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket'

  PrivateSubnetIds:
    Description: Private Subnet IDs
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
    Export:
      Name: !Sub '${ProjectName}-${Environment}-private-subnet-ids'

  PublicSubnetIds:
    Description: Public Subnet IDs
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
    Export:
      Name: !Sub '${ProjectName}-${Environment}-public-subnet-ids'